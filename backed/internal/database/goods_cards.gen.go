// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newGoodsCard(db *gorm.DB, opts ...gen.DOOption) goodsCard {
	_goodsCard := goodsCard{}

	_goodsCard.goodsCardDo.UseDB(db, opts...)
	_goodsCard.goodsCardDo.UseModel(&models.GoodsCard{})

	tableName := _goodsCard.goodsCardDo.TableName()
	_goodsCard.ALL = field.NewAsterisk(tableName)
	_goodsCard.ID = field.NewUint(tableName, "id")
	_goodsCard.CreatedAt = field.NewTime(tableName, "created_at")
	_goodsCard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_goodsCard.DeletedAt = field.NewField(tableName, "deleted_at")
	_goodsCard.GoodsId = field.NewInt64(tableName, "goods_id")
	_goodsCard.UserName = field.NewString(tableName, "user_name")
	_goodsCard.Number = field.NewInt64(tableName, "number")

	_goodsCard.fillFieldMap()

	return _goodsCard
}

type goodsCard struct {
	goodsCardDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	GoodsId   field.Int64
	UserName  field.String
	Number    field.Int64

	fieldMap map[string]field.Expr
}

func (g goodsCard) Table(newTableName string) *goodsCard {
	g.goodsCardDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsCard) As(alias string) *goodsCard {
	g.goodsCardDo.DO = *(g.goodsCardDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsCard) updateTableName(table string) *goodsCard {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.GoodsId = field.NewInt64(table, "goods_id")
	g.UserName = field.NewString(table, "user_name")
	g.Number = field.NewInt64(table, "number")

	g.fillFieldMap()

	return g
}

func (g *goodsCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsCard) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["goods_id"] = g.GoodsId
	g.fieldMap["user_name"] = g.UserName
	g.fieldMap["number"] = g.Number
}

func (g goodsCard) clone(db *gorm.DB) goodsCard {
	g.goodsCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsCard) replaceDB(db *gorm.DB) goodsCard {
	g.goodsCardDo.ReplaceDB(db)
	return g
}

type goodsCardDo struct{ gen.DO }

type IGoodsCardDo interface {
	gen.SubQuery
	Debug() IGoodsCardDo
	WithContext(ctx context.Context) IGoodsCardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsCardDo
	WriteDB() IGoodsCardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsCardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsCardDo
	Not(conds ...gen.Condition) IGoodsCardDo
	Or(conds ...gen.Condition) IGoodsCardDo
	Select(conds ...field.Expr) IGoodsCardDo
	Where(conds ...gen.Condition) IGoodsCardDo
	Order(conds ...field.Expr) IGoodsCardDo
	Distinct(cols ...field.Expr) IGoodsCardDo
	Omit(cols ...field.Expr) IGoodsCardDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsCardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsCardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsCardDo
	Group(cols ...field.Expr) IGoodsCardDo
	Having(conds ...gen.Condition) IGoodsCardDo
	Limit(limit int) IGoodsCardDo
	Offset(offset int) IGoodsCardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsCardDo
	Unscoped() IGoodsCardDo
	Create(values ...*models.GoodsCard) error
	CreateInBatches(values []*models.GoodsCard, batchSize int) error
	Save(values ...*models.GoodsCard) error
	First() (*models.GoodsCard, error)
	Take() (*models.GoodsCard, error)
	Last() (*models.GoodsCard, error)
	Find() ([]*models.GoodsCard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GoodsCard, err error)
	FindInBatches(result *[]*models.GoodsCard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.GoodsCard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsCardDo
	Assign(attrs ...field.AssignExpr) IGoodsCardDo
	Joins(fields ...field.RelationField) IGoodsCardDo
	Preload(fields ...field.RelationField) IGoodsCardDo
	FirstOrInit() (*models.GoodsCard, error)
	FirstOrCreate() (*models.GoodsCard, error)
	FindByPage(offset int, limit int) (result []*models.GoodsCard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsCardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsCardDo) Debug() IGoodsCardDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsCardDo) WithContext(ctx context.Context) IGoodsCardDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsCardDo) ReadDB() IGoodsCardDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsCardDo) WriteDB() IGoodsCardDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsCardDo) Session(config *gorm.Session) IGoodsCardDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsCardDo) Clauses(conds ...clause.Expression) IGoodsCardDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsCardDo) Returning(value interface{}, columns ...string) IGoodsCardDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsCardDo) Not(conds ...gen.Condition) IGoodsCardDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsCardDo) Or(conds ...gen.Condition) IGoodsCardDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsCardDo) Select(conds ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsCardDo) Where(conds ...gen.Condition) IGoodsCardDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsCardDo) Order(conds ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsCardDo) Distinct(cols ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsCardDo) Omit(cols ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsCardDo) Join(table schema.Tabler, on ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsCardDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsCardDo) Group(cols ...field.Expr) IGoodsCardDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsCardDo) Having(conds ...gen.Condition) IGoodsCardDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsCardDo) Limit(limit int) IGoodsCardDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsCardDo) Offset(offset int) IGoodsCardDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsCardDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsCardDo) Unscoped() IGoodsCardDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsCardDo) Create(values ...*models.GoodsCard) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsCardDo) CreateInBatches(values []*models.GoodsCard, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsCardDo) Save(values ...*models.GoodsCard) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsCardDo) First() (*models.GoodsCard, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodsCard), nil
	}
}

func (g goodsCardDo) Take() (*models.GoodsCard, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodsCard), nil
	}
}

func (g goodsCardDo) Last() (*models.GoodsCard, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodsCard), nil
	}
}

func (g goodsCardDo) Find() ([]*models.GoodsCard, error) {
	result, err := g.DO.Find()
	return result.([]*models.GoodsCard), err
}

func (g goodsCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GoodsCard, err error) {
	buf := make([]*models.GoodsCard, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsCardDo) FindInBatches(result *[]*models.GoodsCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsCardDo) Attrs(attrs ...field.AssignExpr) IGoodsCardDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsCardDo) Assign(attrs ...field.AssignExpr) IGoodsCardDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsCardDo) Joins(fields ...field.RelationField) IGoodsCardDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsCardDo) Preload(fields ...field.RelationField) IGoodsCardDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsCardDo) FirstOrInit() (*models.GoodsCard, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodsCard), nil
	}
}

func (g goodsCardDo) FirstOrCreate() (*models.GoodsCard, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodsCard), nil
	}
}

func (g goodsCardDo) FindByPage(offset int, limit int) (result []*models.GoodsCard, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsCardDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsCardDo) Delete(models ...*models.GoodsCard) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsCardDo) withDO(do gen.Dao) *goodsCardDo {
	g.DO = *do.(*gen.DO)
	return g
}

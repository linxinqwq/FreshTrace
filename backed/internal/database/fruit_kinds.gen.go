// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFruitKind(db *gorm.DB, opts ...gen.DOOption) fruitKind {
	_fruitKind := fruitKind{}

	_fruitKind.fruitKindDo.UseDB(db, opts...)
	_fruitKind.fruitKindDo.UseModel(&models.FruitKind{})

	tableName := _fruitKind.fruitKindDo.TableName()
	_fruitKind.ALL = field.NewAsterisk(tableName)
	_fruitKind.ID = field.NewUint(tableName, "id")
	_fruitKind.CreatedAt = field.NewTime(tableName, "created_at")
	_fruitKind.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fruitKind.DeletedAt = field.NewField(tableName, "deleted_at")
	_fruitKind.Kind = field.NewString(tableName, "kind")

	_fruitKind.fillFieldMap()

	return _fruitKind
}

type fruitKind struct {
	fruitKindDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Kind      field.String

	fieldMap map[string]field.Expr
}

func (f fruitKind) Table(newTableName string) *fruitKind {
	f.fruitKindDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fruitKind) As(alias string) *fruitKind {
	f.fruitKindDo.DO = *(f.fruitKindDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fruitKind) updateTableName(table string) *fruitKind {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Kind = field.NewString(table, "kind")

	f.fillFieldMap()

	return f
}

func (f *fruitKind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fruitKind) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["kind"] = f.Kind
}

func (f fruitKind) clone(db *gorm.DB) fruitKind {
	f.fruitKindDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fruitKind) replaceDB(db *gorm.DB) fruitKind {
	f.fruitKindDo.ReplaceDB(db)
	return f
}

type fruitKindDo struct{ gen.DO }

type IFruitKindDo interface {
	gen.SubQuery
	Debug() IFruitKindDo
	WithContext(ctx context.Context) IFruitKindDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFruitKindDo
	WriteDB() IFruitKindDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFruitKindDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFruitKindDo
	Not(conds ...gen.Condition) IFruitKindDo
	Or(conds ...gen.Condition) IFruitKindDo
	Select(conds ...field.Expr) IFruitKindDo
	Where(conds ...gen.Condition) IFruitKindDo
	Order(conds ...field.Expr) IFruitKindDo
	Distinct(cols ...field.Expr) IFruitKindDo
	Omit(cols ...field.Expr) IFruitKindDo
	Join(table schema.Tabler, on ...field.Expr) IFruitKindDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFruitKindDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFruitKindDo
	Group(cols ...field.Expr) IFruitKindDo
	Having(conds ...gen.Condition) IFruitKindDo
	Limit(limit int) IFruitKindDo
	Offset(offset int) IFruitKindDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFruitKindDo
	Unscoped() IFruitKindDo
	Create(values ...*models.FruitKind) error
	CreateInBatches(values []*models.FruitKind, batchSize int) error
	Save(values ...*models.FruitKind) error
	First() (*models.FruitKind, error)
	Take() (*models.FruitKind, error)
	Last() (*models.FruitKind, error)
	Find() ([]*models.FruitKind, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FruitKind, err error)
	FindInBatches(result *[]*models.FruitKind, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FruitKind) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFruitKindDo
	Assign(attrs ...field.AssignExpr) IFruitKindDo
	Joins(fields ...field.RelationField) IFruitKindDo
	Preload(fields ...field.RelationField) IFruitKindDo
	FirstOrInit() (*models.FruitKind, error)
	FirstOrCreate() (*models.FruitKind, error)
	FindByPage(offset int, limit int) (result []*models.FruitKind, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFruitKindDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fruitKindDo) Debug() IFruitKindDo {
	return f.withDO(f.DO.Debug())
}

func (f fruitKindDo) WithContext(ctx context.Context) IFruitKindDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fruitKindDo) ReadDB() IFruitKindDo {
	return f.Clauses(dbresolver.Read)
}

func (f fruitKindDo) WriteDB() IFruitKindDo {
	return f.Clauses(dbresolver.Write)
}

func (f fruitKindDo) Session(config *gorm.Session) IFruitKindDo {
	return f.withDO(f.DO.Session(config))
}

func (f fruitKindDo) Clauses(conds ...clause.Expression) IFruitKindDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fruitKindDo) Returning(value interface{}, columns ...string) IFruitKindDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fruitKindDo) Not(conds ...gen.Condition) IFruitKindDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fruitKindDo) Or(conds ...gen.Condition) IFruitKindDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fruitKindDo) Select(conds ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fruitKindDo) Where(conds ...gen.Condition) IFruitKindDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fruitKindDo) Order(conds ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fruitKindDo) Distinct(cols ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fruitKindDo) Omit(cols ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fruitKindDo) Join(table schema.Tabler, on ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fruitKindDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fruitKindDo) RightJoin(table schema.Tabler, on ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fruitKindDo) Group(cols ...field.Expr) IFruitKindDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fruitKindDo) Having(conds ...gen.Condition) IFruitKindDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fruitKindDo) Limit(limit int) IFruitKindDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fruitKindDo) Offset(offset int) IFruitKindDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fruitKindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFruitKindDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fruitKindDo) Unscoped() IFruitKindDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fruitKindDo) Create(values ...*models.FruitKind) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fruitKindDo) CreateInBatches(values []*models.FruitKind, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fruitKindDo) Save(values ...*models.FruitKind) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fruitKindDo) First() (*models.FruitKind, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FruitKind), nil
	}
}

func (f fruitKindDo) Take() (*models.FruitKind, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FruitKind), nil
	}
}

func (f fruitKindDo) Last() (*models.FruitKind, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FruitKind), nil
	}
}

func (f fruitKindDo) Find() ([]*models.FruitKind, error) {
	result, err := f.DO.Find()
	return result.([]*models.FruitKind), err
}

func (f fruitKindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FruitKind, err error) {
	buf := make([]*models.FruitKind, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fruitKindDo) FindInBatches(result *[]*models.FruitKind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fruitKindDo) Attrs(attrs ...field.AssignExpr) IFruitKindDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fruitKindDo) Assign(attrs ...field.AssignExpr) IFruitKindDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fruitKindDo) Joins(fields ...field.RelationField) IFruitKindDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fruitKindDo) Preload(fields ...field.RelationField) IFruitKindDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fruitKindDo) FirstOrInit() (*models.FruitKind, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FruitKind), nil
	}
}

func (f fruitKindDo) FirstOrCreate() (*models.FruitKind, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FruitKind), nil
	}
}

func (f fruitKindDo) FindByPage(offset int, limit int) (result []*models.FruitKind, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fruitKindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fruitKindDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fruitKindDo) Delete(models ...*models.FruitKind) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fruitKindDo) withDO(do gen.Dao) *fruitKindDo {
	f.DO = *do.(*gen.DO)
	return f
}
